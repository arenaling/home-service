{"version":3,"sources":["../../../../server/api/user/user.model.js"],"names":[],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('User', {\n\n    _id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    name: DataTypes.STRING,\n    email: {\n      type: DataTypes.STRING,\n      unique: {\n        msg: 'The specified email address is already in use.'\n      },\n      validate: {\n        isEmail: true\n      }\n    },\n    role: {\n      type: DataTypes.STRING,\n      defaultValue: 'user'\n    },\n    password: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: true\n      }\n    },\n    provider: DataTypes.STRING,\n    salt: DataTypes.STRING,\n    id_agency: DataTypes.INTEGER\n  }, {\n\n    /**\n     * Virtual Getters\n     */\n    getterMethods: {\n      // Public profile information\n      profile: function() {\n        return {\n          'name': this.name,\n          'role': this.role\n        };\n      },\n\n      // Non-sensitive info we'll be putting in the token\n      token: function() {\n        return {\n          '_id': this._id,\n          'role': this.role\n        };\n      }\n    },\n\n    /**\n     * Pre-save hooks\n     */\n    hooks: {\n      beforeBulkCreate: function(users, fields, fn) {\n        var totalUpdated = 0;\n        users.forEach(function(user) {\n          user.updatePassword(function(err) {\n            if (err) {\n              return fn(err);\n            }\n            totalUpdated += 1;\n            if (totalUpdated === users.length) {\n              return fn();\n            }\n          });\n        });\n      },\n      beforeCreate: function(user, fields, fn) {\n        user.updatePassword(fn);\n      },\n      beforeUpdate: function(user, fields, fn) {\n        if (user.changed('password')) {\n          return user.updatePassword(fn);\n        }\n        fn();\n      }\n    },\n\n    /**\n     * Instance Methods\n     */\n    instanceMethods: {\n      /**\n       * Authenticate - check if the passwords are the same\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {Boolean}\n       * @api public\n       */\n      authenticate: function(password, callback) {\n        if (!callback) {\n          return this.password === this.encryptPassword(password);\n        }\n\n        var _this = this;\n        this.encryptPassword(password, function(err, pwdGen) {\n          if (err) {\n            callback(err);\n          }\n\n          if (_this.password === pwdGen) {\n            callback(null, true);\n          }\n          else {\n            callback(null, false);\n          }\n        });\n      },\n\n      /**\n       * Make salt\n       *\n       * @param {Number} byteSize Optional salt byte size, default to 16\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      makeSalt: function(byteSize, callback) {\n        var defaultByteSize = 16;\n\n        if (typeof arguments[0] === 'function') {\n          callback = arguments[0];\n          byteSize = defaultByteSize;\n        }\n        else if (typeof arguments[1] === 'function') {\n          callback = arguments[1];\n        }\n\n        if (!byteSize) {\n          byteSize = defaultByteSize;\n        }\n\n        if (!callback) {\n          return crypto.randomBytes(byteSize).toString('base64');\n        }\n\n        return crypto.randomBytes(byteSize, function(err, salt) {\n          if (err) {\n            callback(err);\n          }\n          return callback(null, salt.toString('base64'));\n        });\n      },\n\n      /**\n       * Encrypt password\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      encryptPassword: function(password, callback) {\n        if (!password || !this.salt) {\n          if (!callback) {\n            return null;\n          }\n          return callback(null);\n        }\n\n        var defaultIterations = 10000;\n        var defaultKeyLength = 64;\n        var salt = new Buffer(this.salt, 'base64');\n\n        if (!callback) {\n          return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\n                       .toString('base64');\n        }\n\n        return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength,\n          function(err, key) {\n            if (err) {\n              callback(err);\n            }\n            return callback(null, key.toString('base64'));\n          });\n      },\n\n      /**\n       * Update password field\n       *\n       * @param {Function} fn\n       * @return {String}\n       * @api public\n       */\n      updatePassword: function(fn) {\n        // Handle new/update passwords\n        if (this.password) {\n          if (!validatePresenceOf(this.password)) {\n            fn(new Error('Invalid password'));\n          }\n\n          // Make salt with a callback\n          var _this = this;\n          this.makeSalt(function(saltErr, salt) {\n            if (saltErr) {\n              fn(saltErr);\n            }\n            _this.salt = salt;\n            _this.encryptPassword(_this.password, function(encryptErr, hashedPassword) {\n              if (encryptErr) {\n                fn(encryptErr);\n              }\n              _this.password = hashedPassword;\n              fn(null);\n            });\n          });\n        } else {\n          fn(null);\n        }\n      }\n    }\n  });\n\n  return User;\n};\n"]}